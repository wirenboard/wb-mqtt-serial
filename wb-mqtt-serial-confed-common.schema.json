{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",

  "definitions": {
    "slave_id": {
      "properties": {
        "slave_id": {
          "oneOf": [
            {
              "title": "Slave id of the device",
              "propertyOrder": 2,
              "type": "string",
              "pattern": "^(0x[A-Fa-f\\d]+|\\d+|(0x[A-Fa-f\\d]+|\\d+):(0x[A-Fa-f\\d]+|\\d+))$",
              "options": {
                "inputAttributes": {
                  "placeholder":  "decimal (e.g. 123) or hex (e.g. 0xAF)"
                },
                "patternmessage": "Should be decimal or hex"
              }
            },
            {
              "type": "integer"
            }
          ],
          "format": "wb-first-oneof"
        }
      }
    },
    "slave_id_broadcast": {
      "properties": {
        "slave_id": {
          "oneOf": [
            {
              "title": "Slave id of the device or broadcast mode",
              "propertyOrder": 2,
              "type": "string",
              "pattern": "^(0x[A-Fa-f\\d]+|\\d+)$",
              "options": {
                "show_opt_in": true,
                "wb": {
                    "editor_title": "decimal or hex slave id",
                    "undefined_title": "broadcast",
                    "undefined_message" : "broadcast_description"
                },
                "inputAttributes": {
                  "placeholder":  "decimal (e.g. 123) or hex (e.g. 0xAF)"
                },
                "patternmessage": "Should be decimal or hex"
              },
              "format" : "wb-optional"
            },
            {
              "type": "integer"
            }
          ],
          "format": "wb-first-oneof"
        }
      }
    },
    "device_name": {
      "description" : "Device name to be displayed in UI",
      "minLength" : 1,
      "type" : "string"
    },
    "deviceProperties": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enable device",
          "default": true,
          "format": "checkbox",
          "propertyOrder": 1
        },
        "name" : {
          "$ref" : "#/definitions/device_name",
          "title" : "Device name",
          "propertyOrder": 3
        },
        "id": {
          "type": "string",
          "title": "MQTT id of the device",
          "description": "Used as part of the topic",
          "pattern": "^[^$#+\\/\"']+$",
          "options": {
            "patternmessage": "Invalid device ID"
          },
          "propertyOrder": 4
        },
        "poll_interval": {
          "type": "integer",
          "options": {
            "hidden": true
          }
        },
        "read_rate_limit_ms": {
          "type": "integer",
          "title": "Read rate limit (ms)",
          "description" : "read_rate_limit_description",
          "minimum": 0,
          "default": 1000,
          "propertyOrder": 5
        },
        "password": {
          "type": "array",
          "title": "Password as a list of bytes",
          "items": { "$ref": "#/definitions/serial_int" },
          "format": "table",
          "propertyOrder": 101,
          "options": {
            "disable_array_delete_last_row": true
          }
        },
        "access_level": {
          "type": "integer",
          "title": "Access level",
          "minimum": 0,
          "maximum": 2,
          "default": 1,
          "propertyOrder": 102
        },
        "max_reg_hole": {
          "type": "integer",
          "title": "Max dummy read register count",
          "minimum": 0,
          "default": 0,
          "propertyOrder": 103
        },
        "max_bit_hole": {
          "type": "integer",
          "title": "Max dummy read bit count",
          "minimum": 0,
          "default": 0,
          "propertyOrder": 104
        },
        "max_read_registers": {
          "type": "integer",
          "title": "Maximum number of registers in a single bulk read request",
          "minimum": 0,
          "default": 1,
          "propertyOrder": 105
        },
        "min_read_registers": {
          "type": "integer",
          "title": "Minimum number of registers in a single bulk read request",
          "minimum": 0,
          "default": 1,
          "propertyOrder": 106
        },
        "guard_interval_us": {
          "type": "integer",
          "title": "Additional delay before each writing to port (us)",
          "minimum": 0,
          "default": 0,
          "propertyOrder": 107
        },
        "frame_timeout_ms": {
          "type": "integer",
          "title": "Frame timeout (ms)",
          "description": "frame_timeout_description",
          "minimum": -1,
          "default": -1,
          "propertyOrder": 108
        },
        "force_frame_timeout": {
          "type": "boolean",
          "title": "Force frame timeout",
          "description": "force_frame_timeout_desc",
          "default": false,
          "format": "checkbox",
          "propertyOrder": 109
        },
        "response_timeout_ms": {
          "type": "integer",
          "title": "Response timeout (ms)",
          "description": "response_timeout_description",
          "minimum": -1,
          "default": -1,
          "propertyOrder": 110
        },
        "device_timeout_ms": {
          "type": "integer",
          "title": "Device timeout (ms)",
          "description": "device_timeout_description",
          "minimum": -1,
          "default": 3000,
          "propertyOrder": 111
        },
        "device_max_fail_cycles": {
          "type": "integer",
          "title": "Device max fail cycles",
          "description": "device_max_fail_cycles_desc",
          "minimum": -1,
          "default": 2,
          "propertyOrder": 112
        },
        "max_write_fail_time_s": {
          "type": "integer",
          "title": "Max write fail time (s)",
          "description": "max_write_fail_time_desc",
          "minimum": 0,
          "default": 600,
          "propertyOrder": 113
        }
      }
    },
    "setup_cmd": {
      "type": "object",
      "title": "Setup command",
      "headerTemplate": "{{self.title}}",
      "properties": {
        "title": {
          "type": "string",
          "title": "Command name",
          "description": "Used for logging/debugging purposes only",
          "propertyOrder": 1
        },
        "address": {
          "title": "Address",
          "description": "Register index (0-65535 in case of Modbus)",
          "propertyOrder": 2,
          "$ref": "#/definitions/address",
          "options": {
            "keep_oneof_values": false
          }
        },
        "value": {
          "title": "Value",
          "propertyOrder": 3,
          "$ref": "#/definitions/serial_int",
          "options": {
            "keep_oneof_values": false
          }
        }
      },
      "options": {
        "wb": {
          "disable_title": true
        }
      },
      "format": "grid",
      "required": ["address", "value"]
    },
    "register_channel_common": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enabled",
          "default" : true,
          "propertyOrder": 1,
          "format": "checkbox"
        },
        "name": {
          "$ref": "#/definitions/channel_name",
          "title": "Name", 
          "propertyOrder": 2
        },
        "id": {
          "$ref": "#/definitions/channel_id",
          "propertyOrder": 3
        },
        "type": {
          "$ref": "#/definitions/control_type",
          "title": "Type", 
          "propertyOrder": 4
        },
        "reg_type": {
          "$ref": "#/definitions/reg_type",
          "title": "Register type", 
          "propertyOrder": 5
        },
        "units": {
          "$ref": "#/definitions/units",
          "title": "Units",
          "propertyOrder": 8
        },
        "format": {
          "$ref": "#/definitions/format",
          "title": "Format", 
          "propertyOrder": 9
        },
        "max": {
          "title": "Maximum value",
          "$ref": "#/definitions/serial_int",
          "propertyOrder": 10,
          "options": {
            "keep_oneof_values": false
          }
        },
        "scale": {
          "type": "number",
          "title": "Scale (value multiplier)",
          "description": "Value displayed = round((value read * scale) + offset) / round_to) * round_to",
          "default" : 1,
          "propertyOrder": 11,
          "options": {
            "grid_columns": 4,
            "dependencies": {
              "format": ["s16", "u16", "s8", "u8", "s24", "u24", "s32", "u32", "s64", "u64", "bcd8", "bcd16", "bcd24", "bcd32", "float", "double", "char8"]
            }
          }
        },
        "offset": {
          "type": "number",
          "title": "Value offset",
          "description": "Value displayed = round((value read * scale) + offset) / round_to) * round_to",
          "default" : 0,
          "propertyOrder": 12,
          "options": {
            "grid_columns": 4,
            "dependencies": {
              "format": ["s16", "u16", "s8", "u8", "s24", "u24", "s32", "u32", "s64", "u64", "bcd8", "bcd16", "bcd24", "bcd32", "float", "double", "char8"]
            }
          }
        },
        "round_to": {
          "type": "number",
          "title": "Round to",
          "description": "Value displayed = round((value read * scale) + offset) / round_to) * round_to",
          "default" : 1,
          "propertyOrder": 13,
          "minimum": 0
        },
        "readonly": {
          "title": "Read-only",
          "type": "boolean",
          "propertyOrder": 14
        },
        "on_value": {
          // TBD: only use on_value for 'switch' and 'wo-switch' types
          "title": "'On' value",
          "description": "Value corresponding to the 'On' state of the switch",
          "$ref": "#/definitions/serial_int",
          "propertyOrder": 15,
          "options": {
            "keep_oneof_values": false
          }
        },
        "off_value": {
          "title": "'Off' value",
          "description": "Value corresponding to the 'Off' state of the switch",
          "$ref": "#/definitions/serial_int",
          "propertyOrder": 16,
          "options": {
            "keep_oneof_values": false
          }
        },
        "poll_interval": {
          "type": "integer",
          "options": {
            "hidden": true
          }
        },
        "read_period_ms": {
          "type": "integer",
          "title": "Read period (ms)",
          "description" : "read_period_description",
          "minimum": 10,
          "options": {
            "enum_values": [ 100, 200 ],
            "inputAttributes": {
              "placeholder": "in queue order"
            }
          },
          "format": "edWb",
          "propertyOrder": 16
        },
        "read_rate_limit_ms": {
          "type": "integer",
          "title": "Read rate limit (ms)",
          "description" : "read_rate_limit_description",
          "minimum": 0,
          "default": 1000,
          "propertyOrder": 17
        },
        "error_value": {
          "title": "Error value",
          "description": "Value which should be treated as read error",
          "propertyOrder": 18,
          "oneOf": [
            {
              "title": "decimal or hex",
              "type": "string",
              "pattern": "^(0x[A-Fa-f\\d]+|\\d+)$",
              "options": {
                "inputAttributes": {
                  "placeholder":  "decimal (e.g. 123) or hex (e.g. 0xAF)"
                },
                "patternmessage": "Should be decimal or hex"
              }
            },
            {
              "title": "decimal",
              "type": "integer",
              "minimum": 0,
              "maximum": 4294967295
            }
          ]
        },
        "unsupported_value": {
          "title": "Unsupported register value",
          "description": "Value which should be treated as 'register is unsupported by device'",
          "propertyOrder": 19,
          "type": "string",
          "pattern": "^(0x[A-Fa-f\\d]+)$",
          "options": {
            "inputAttributes": {
              "placeholder":  "hex with prefix '0x'"
            },
            "patternmessage": "Should be hex with prefix '0x'"
          }
        },
        "word_order": {
          "$ref": "#/definitions/word_order",
          "title": "Word order",
          "propertyOrder": 20
        },
        "string_data_size": {
          "type": "integer",
          "title": "String size in characters",
          "description": "string_data_size_description",
          "minimum": 1,
          "default": 1,
          "propertyOrder": 21,
          "options": {
            "dependencies": {
              "format": "string"
            }
          }
        },
        "sporadic": {
          "title": "Dispatched with an event",
          "description": "sporadic_description",
          "type": "boolean",
          "default": false,
          "propertyOrder": 22
        },
        "semi-sporadic": {
          "title": "Dispatched with an event and polling",
          "description": "semi_sporadic_description",
          "type": "boolean",
          "default": false,
          "propertyOrder": 23
        },
        "enum": {
          "title": "List of values",
          "type": "array",
          "items": {
            "oneOf": [
              { "type": "string" },
              { "type": "number" }
            ]
          },
          "propertyOrder": 24
        },
        "enum_titles": {
          "title": "List of value titles",
          "type": "array",
          "items": { "type": "string" },
          "propertyOrder": 25
        },
        "consists_of": {
          "not": {},
          "options": { "hidden": true }
        },
        "device_type": {
          "not": {},
          "options": { "hidden": true }
        }
      },
      // FIXME: require "reg_type" and "address" for non-templated devices
      "required": ["name"],
      "defaultProperties": ["name", "type", "reg_type", "format", "scale", "offset", "string_data_size"],
      "format": "grid",
      "options": {
        "disable_collapse": true,
        "disable_edit_json": true
      }
    },
    "registerChannel": {
      "allOf": [
        { "$ref": "#/definitions/register_channel_common"},
        {
          "properties": {
            "address": {
              "$ref": "#/definitions/address",
              "title": "Address",
              "propertyOrder": 6,
              "options": {
                "keep_oneof_values": false
              }
            }
          },
          "required": ["address"],
          "defaultProperties" : ["address"],
          "not" : {"required": ["write_address"]}
        }
      ]
    },
    "registerChannelSeparateAddress": {
      "title": "Channel with separate r/w addresses",
      "allOf": [
        { "$ref": "#/definitions/register_channel_common"},
        {
          "properties": {
            "address": {
              "title": "Read Address",
              "$ref": "#/definitions/address",
              "propertyOrder": 6,
              "options": {
                "keep_oneof_values": false
              }
            },
            "write_address": {
              "$ref": "#/definitions/write_address",
              "propertyOrder": 7,
              "options": {
                "keep_oneof_values": false
              }
            }
          },
          "required": ["address", "write_address"],
          "defaultProperties": ["address", "write_address"]
        }
      ]
    },
    "registerChannelWriteOnly": {
      "title": "Write Only Channel",
      "allOf": [
        { "$ref": "#/definitions/register_channel_common"},
        {
          "properties": {
            "write_address": {
              "$ref": "#/definitions/write_address",
              "propertyOrder": 6,
              "options": {
                "keep_oneof_values": false
              }
            }
          },
          "required": ["write_address"],
          "defaultProperties": ["write_address"],
          "not" : {"required": ["address"]}
        }
      ]
    },
    "compoundRegisterChannel": {
      "title": "Compound channel",
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enabled",
          "default" : true,
          "propertyOrder": 1,
          "format": "checkbox"
        },
        "name": {
          "$ref": "#/definitions/channel_name",
          "propertyOrder": 2
        },
        "id": {
          "$ref": "#/definitions/channel_id",
          "propertyOrder": 3
        },
        "type": {
          "$ref": "#/definitions/control_type",
          "propertyOrder": 4
        },
        "units": {
          "$ref": "#/definitions/units",
          "title": "Units",
          "propertyOrder": 7
        },
        "readonly": {
          "title": "Read-only",
          "type": "boolean",
          "propertyOrder": 8
        },
        "consists_of": {
          "type": "array",
          "title": "A list of subregisters",
          "items": { "$ref": "#/definitions/subreg" },
          "minItems": 1,
          "format": "table",
          "propertyOrder": 9,
          "options": {
            "disable_collapse": true,
            "wb": {
              "disable_panel": true
            },
            "disable_array_delete_last_row": true,
            "array_controls_top": true
          }
        },
        "poll_interval": {
          "type": "integer",
          "options": {
            "hidden": true
          }
        },
        "read_period_ms": {
          "type": "integer",
          "title": "Read period (ms)",
          "description" : "read_period_description",
          "minimum": 10,
          "options": {
            "enum_values": [ 100, 200 ],
            "inputAttributes": {
              "placeholder": "in queue order"
            }
          },
          "format": "edWb",
          "propertyOrder": 10
        },
        "read_rate_limit_ms": {
          "type": "integer",
          "title": "Read rate limit (ms)",
          "description" : "read_rate_limit_description",
          "minimum": 0,
          "default": 1000,
          "propertyOrder": 11
        }
      },
      "required": ["name", "consists_of"],
      "defaultProperties": ["name", "consists_of"],
      "options": {
        "disable_collapse": true,
        "disable_edit_json": true
      }
    },
    "common_channel": {
      "headerTemplate": "{{self.name}}",
      "title": "Channel",
      "oneOf": [
        { "$ref": "#/definitions/registerChannel" },
        { "$ref": "#/definitions/compoundRegisterChannel" }
      ],
      "options": {
        "keep_oneof_values": false,
        "wb": {
          "disable_panel": true
        },
        "disable_collapse": true
      },
      "format": "wb-multiple"
    },
    "common_channel_modbus": {
      "headerTemplate": "{{self.name}}",
      "title": "Channel",
      "oneOf": [
        { "$ref": "#/definitions/registerChannel" },
        { "$ref": "#/definitions/compoundRegisterChannel" },
        { "$ref": "#/definitions/registerChannelSeparateAddress" },
        { "$ref": "#/definitions/registerChannelWriteOnly" }
      ],
      "options": {
        "keep_oneof_values": false,
        "wb": {
          "disable_panel": true
        },
        "disable_collapse": true
      }
    },
    "channelSettings": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enable poll",
          "default": true,
          "format": "checkbox"
        },
        "poll_interval": {
          "type": "integer",
          "options": {
            "hidden": true
          }
        },
        "read_period_ms": {
          "type": "integer",
          "title": "Read period (ms)",
          "description" : "read_period_description",
          "minimum": 10,
          "options": {
            "enum_values": [ 100, 200 ],
            "inputAttributes": {
              "placeholder": "in queue order"
            },
            "dependencies": {
              "enabled": true
            }
          },
          "format": "edWb",
          "propertyOrder": 3
        },
        "read_rate_limit_ms": {
          "type": "integer",
          "title": "Read rate limit (ms)",
          "description" : "read_rate_limit_description",
          "minimum": 0,
          "default": -1,
          "options": {
            "dependencies": {
              "enabled": true
            }
          },
          "format": "siWb",
          "propertyOrder": 4
        }
      },
      "options": {
        "disable_collapse": true,
        "disable_edit_json": true,
        "disable_properties": true
      }
    },
    "tableChannelSettings": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "options": {
            "hidden": true
          }
        },
        "title": {
          "title": "Parameter",
          "type": "string",
          "format": "info",
          "propertyOrder": 1
        },
        "mode": {
          "type": "integer",
          "title": "Poll",
          "propertyOrder": 2
        },
        "period": {
          "type": "integer",
          "title": "Period (ms)",
          "minimum": 0,
          "maximum": 172800000,
          "propertyOrder": 3,
          "default": 1000
        }
      },
      "required": ["mode", "name"],
      "options": {
        "remove_empty_properties": true
      }
    },
    "groupsChannel": {
      "type": "object",
      "properties": {
        "mode": {
          "type": "integer",
          "title": "Poll"
        },
        "period": {
          "type": "integer",
          "title": "Period (ms)",
          "minimum": 0,
          "maximum": 172800000,
          "default": 1000
        },
        "channelIndex": {
          "type": "integer",
          "options": {
            "hidden": true
          }
        }
      },
      "required": ["mode", "channelIndex"]
    },
    "subreg": {
      "type": "object",
      "title": "Subregister",
      "properties": {
        "reg_type": {
          "$ref": "#/definitions/reg_type",
          "propertyOrder": 1
        },
        "address": {
          "$ref": "#/definitions/address",
          "propertyOrder": 2,
          "options": {
            "keep_oneof_values": false
          }
        },
        "format": {
          "$ref": "#/definitions/format",
          "propertyOrder": 3
        },
        "scale": {
          "type": "number",
          "title": "Scale (value multiplier)",
          "default" : 1,
          "propertyOrder": 4
        },
        "offset": {
          "type": "number",
          "title": "Value offset",
          "default" : 0,
          "propertyOrder": 5
        },
        "word_order": {
          "$ref": "#/definitions/word_order",
          "propertyOrder": 6
        }
      },
      "required": ["reg_type", "address"],
      "defaultProperties":  ["reg_type", "address"]
    },
    "channel_name": {
      "type": "string",
      "title": "Control name",
      "description": "This name is displayed both in UI and used as part of MQTT topic",
      "pattern": "^[^$#+\\/\"']+$",
      "options": {
        "patternmessage": "Invalid channel name"
      }
    },
    "channel_id": {
      "type": "string",
      "title": "MQTT id of the channel",
      "description": "Used as part of the topic",
      "pattern": "^[^$#+\\/\"']+$",
      "options": {
        "patternmessage": "Invalid channel ID"
      }
    },
    "control_type": {
      "type": "string",
      "title": "Control type",
      "description": "Defaults to 'switch' for coils and discrete inputs, 'text' for others",
      "enum": [
        "switch", "wo-switch", "pushbutton", "range", "rgb", "text",
        "value", "temperature", "rel_humidity",
        "atmospheric_pressure", "rainfall", "wind_speed", "power",
        "power_consumption", "voltage", "water_flow",
        "water_consumption", "resistance", "concentration",
        "heat_energy", "heat_power",
        "dimmer", "lux", "pressure", "current", "sound_level"
      ],
      "options" : {
        "enum_titles": [
          "switch",
          "wo-switch",
          "pushbutton",
          "range",
          "rgb",
          "text",
          "value",
          "temperature (deprecated, use value with units)",
          "rel_humidity (deprecated, use value with units)",
          "atmospheric_pressure (deprecated, use value with units)",
          "rainfall (deprecated, use value with units)",
          "wind_speed (deprecated, use value with units)",
          "power (deprecated, use value with units)",
          "power_consumption (deprecated, use value with units)",
          "voltage (deprecated, use value with units)",
          "water_flow (deprecated, use value with units)",
          "water_consumption (deprecated, use value with units)",
          "resistance (deprecated, use value with units)",
          "concentration (deprecated, use value with units)",
          "heat_energy (deprecated, use value with units)",
          "heat_power (deprecated, use value with units)",
          "dimmer (deprecated, use value with units)",
          "lux (deprecated, use value with units)",
          "pressure (deprecated, use value with units)",
          "current (deprecated, use value with units)",
          "sound_level (deprecated, use value with units)"
        ]
      }
    },
    "units": {
      "type": "string",
      "format": "edWb"
    },
    "reg_type": {
      "type": "string",
      "title": "Register type",
      "enum": ["coil", "discrete", "holding", "holding_single", "holding_multi", "input", "direct", "relay", 
               "brightness", "param", "relay_mode", "relay_default", "relay_delay", "energy", "array",
               "param_be", "param_sign_active", "param_sign_reactive", "array12", "default", "param16", 
               "param24", "param32", "power", "freq", "power_factor", "group_single", 
               "temperature", "item_1", "item_2", "item_3", "item_4", "item_5", 
               "alarm", "position", "command", "date", "time", "angle", "type", "status", "zonebit",
               // obis_* are deprecated, use item_*, temperature and power_factor
               "obis_cdef", "obis_cdef_pf", "obis_cdef_temp", "obis_cdef_1", "obis_cdef_2", "obis_cdef_3", "obis_cdef_4", "obis_cdef_5"]
    },
    "format": {
      "type": "string",
      "title": "Format",
      "enum": ["s16", "u16", "s8", "u8", "s24", "u24", "s32", "u32", "s64", "u64", "bcd8", "bcd16", "bcd24", "bcd32", "float", "double", "char8", "string"],
      "options": {
        "enum_titles" : [ "Signed 16-bit integer", "Unsigned 16-bit integer", "Signed 8-bit integer", "Unsigned 8-bit integer",
                          "Signed 24-bit integer", "Unsigned 24-bit integer", "Signed 32-bit integer", "Unsigned 32-bit integer",
                          "Signed 64-bit integer", "Unsigned 64-bit integer",
                          "8-bit BCD", "16-bit BCD","24-bit BCD", "32-bit BCD", "IEEE754 32-bit float", "IEEE754 64-bit float (double)",
                          "8-bit ASCII char", "String"]
      }
    },
    "word_order": {
      "type": "string",
      "title": "16-bit Word Order",
      "enum": ["big_endian", "little_endian"],
      "options": {
        "enum_titles" : [ "Big-endian ( [0xAA 0xBB] [0xCC 0xDD] => 0xAABBCCDD)",
                          "Little-endian ( [0xAA 0xBB] [0xCC 0xDD] => 0xCCDDAABB)"]
      },
      "default" : "big_endian"
    },
    "address": {
      "title": "Address",
      "description": "Register index (0-65535 in case of Modbus)",
      "oneOf": [
        {
          "title": "decimal or hex",
          "type": "string",
          "pattern": "^(0x[A-Fa-f\\d]+|\\d+)$",
          "options": {
            "inputAttributes": {
              "placeholder":  "decimal (e.g. 123) or hex (e.g. 0xAF)"
            },
            "patternmessage": "Should be decimal or hex"
          }
        },
        {
          "title": "bits",
          "type": "string",
          "pattern": "^((0x[A-Fa-f\\d]+|\\d+):(\\d+):(\\d+))$",
          "options": {
            "inputAttributes": {
              "placeholder":  "address:offset:bitwidth"
            },
            "patternmessage": "Address should be decimal or hex, offset and bitwidth separated by ':'"
          }
        },
        {
          "title": "decimal",
          "type": "integer"
        }
      ],
      "options": {
        "keep_oneof_values": false
      }
    },
    "write_address": {
      "title": "Write Address",
      "description": "Register index (0-65535 in case of Modbus)",
      "oneOf": [
        {
          "title": "decimal or hex",
          "type": "string",
          "pattern": "^(0x[A-Fa-f\\d]+|\\d+)$",
          "options": {
            "inputAttributes": {
              "placeholder":  "decimal (e.g. 123) or hex (e.g. 0xAF)"
            },
            "patternmessage": "Should be decimal or hex"
          }
        },
        {
          "title": "decimal",
          "type": "integer"
        }
      ],
      "options": {
        "keep_oneof_values": false
      }
    },
    "serial_int": {
      "oneOf": [
        {
          "title": "decimal or hex",
          "type": "string",
          "pattern": "^(0x[A-Fa-f\\d]+|\\d+)$",
          "options": {
            "patternmessage": "Should be decimal or hex"
          }
        },
        {
          "title": "decimal",
          "type": "integer"
        }
      ]
    },

    "no_setup": {
      "properties": {
        "setup": {
          "not": {},
          "options": { "hidden": true }
        }
      }
    },

    "dlms_address": {
      "properties": {
        "address": {
          "title": "OBIS code",
          "type": "string",
          "pattern": "^(\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+)$",
          "propertyOrder": 6,
          "options": {
            "inputAttributes": {
              "placeholder":  "X.X.X.X.X.X"
            },
            "patternmessage": "OBIS code should contain 6 numbers separated by dots (X.X.X.X.X.X)"
          }
        }
      },
      "required": ["address"]
    },
    "dlms_channel": {
      "headerTemplate": "{{self.name}}",
      "title": "Channel",
      "allOf": [
        { "$ref": "#/definitions/register_channel_common"},
        { "$ref": "#/definitions/dlms_address" }
      ],
      "format": "wb-object",
      "options" : {
        "wb": {
          "disable_panel": true
        }
      }
    },
    "dlms_channels": {
      "properties": {
        "channels": {
          "type": "array",
          "title": "Custom channels",
          "items": { "$ref": "#/definitions/dlms_channel" },
          "propertyOrder": 99,
          "format": "tabs",
          "options": {
            "disable_array_delete_last_row": true
          }
        }
      }
    },
    "dlms_device_properties": {
      "properties": {
        "dlms_client_address": {
          "title": "DLMS client address",
          "description": "16 - public client (default), 32 - SPODES measurements reader, 48 - SPODES configurator",
          "type": "integer",
          "minimum": 0,
          "default": 16,
          "propertyOrder": 9
        },
        "dlms_auth": {
          "title": "DLMS authentication mode",
          "type": "integer",
          "enum": [0, 1, 2, 3, 4, 5, 6, 7],
          "options": {
            "enum_titles": [
              "no authentication",
              "low",
              "high",
              "high, password is hashed with MD5",
              "high, password is hashed with SHA1",
              "high, password is hashed with GMAC",
              "high, password is hashed with SHA-256",
              "high, password is hashed with ECDSA"
            ]
          },
          "default": 0,
          "propertyOrder": 12
        },
        "dlms_interface": {
          "title": "DLMS interface",
          "type": "integer",
          "enum": [0, 1, 2, 3, 5, 6, 7, 8, 9],
          "options": {
            "enum_titles": [
              "HDLC",
              "TCP/IP or UDP wrapper, can be used with devices that support IEC 62056-47",
              "plain PDU",
              "Wireless M-Bus",
              "PLC",
              "PLC HDLC",
              "LowPower Wide Area Networks (LPWAN)",
              "Wi-SUN FAN mesh network",
              "OFDM PLC PRIME"
            ]
          },
          "default": 0,
          "propertyOrder": 13
        }
      }
    },
    "dlms_device": {
      "allOf": [
        { "$ref": "#/definitions/deviceProperties" },
        { "$ref": "#/definitions/dlms_device_properties" },
        { "$ref": "#/definitions/dlms_channels" },
        { "$ref": "#/definitions/slave_id" },
        { "$ref": "#/definitions/no_setup" }
      ]
    },
    "dlms_device_no_channels": {
      "allOf": [
        { "$ref": "#/definitions/deviceProperties" },
        { "$ref": "#/definitions/dlms_device_properties" },
        { "$ref": "#/definitions/slave_id" },
        { "$ref": "#/definitions/no_setup" }
      ]
    },

    "somfy_device_properties": {
      "properties": {
        "node_type": {
          "title": "Motor type",
          "type": "integer",
          "enum": [2, 5, 6, 7, 8, 9],
          "options": {
            "enum_titles": [
              "Sonesse 30 DC",
              "RTS transmitter",
              "Glydea",
              "Sonesse 50 AC",
              "Sonesse 50 DC",
              "Sonesse 40 AC"
            ]
          },
          "default": 2,
          "propertyOrder": 12
        }
      }
    },
    "somfy_device_no_channels": {
      "allOf": [
        { "$ref": "#/definitions/deviceProperties" },
        { "$ref": "#/definitions/somfy_device_properties" },
        { "$ref": "#/definitions/slave_id" },
        { "$ref": "#/definitions/no_setup" }
      ]
    },

    "string_address": {
      "properties": {
        "address": {
          "title": "Parameter",
          "type": "string",
          "propertyOrder": 6
        }
      },
      "required": ["address"]
    },
    "channel_with_string_address": {
      "headerTemplate": "{{self.name}}",
      "title": "Channel",
      "allOf": [
        { "$ref": "#/definitions/register_channel_common"},
        { "$ref": "#/definitions/string_address" }
      ],
      "format": "wb-object",
      "options" : {
        "wb": {
          "disable_panel": true
        }
      }
    },
    "channels_with_string_addresses": {
      "properties": {
        "channels": {
          "type": "array",
          "title": "Custom channels",
          "items": { "$ref": "#/definitions/channel_with_string_address" },
          "propertyOrder": 99,
          "format": "tabs",
          "options": {
            "disable_array_delete_last_row": true
          }
        }
      }
    },

    "common_channels": {
      "properties": {
        "channels": {
          "type": "array",
          "title": "Custom channels",
          "items": { "$ref": "#/definitions/common_channel" },
          "propertyOrder": 99,
          "format": "tabs",
          "options": {
            "disable_array_delete_last_row": true
          }
        }
      }
    },
    "common_channels_modbus": {
      "properties": {
        "channels": {
          "type": "array",
          "title": "Custom channels",
          "items": { "$ref": "#/definitions/common_channel_modbus" },
          "propertyOrder": 99,
          "format": "tabs",
          "options": {
            "disable_array_delete_last_row": true
          }
        }
      }
    },
    "common_setup": {
      "properties": {
        "setup": {
          "type": "array",
          "title": "Custom setup commands",
          "items": { "$ref": "#/definitions/setup_cmd" },
          "propertyOrder": 100,
          "format": "tabs",
          "options": {
            "disable_array_delete_last_row": true
          }
        }
      }
    },

    "simple_device": {
      "allOf": [
        { "$ref": "#/definitions/deviceProperties" },
        { "$ref": "#/definitions/no_setup" },
        { "$ref": "#/definitions/common_channels" },
        { "$ref": "#/definitions/slave_id" }
      ]
    },
    "simple_device_no_channels": {
      "allOf": [
        { "$ref": "#/definitions/deviceProperties" },
        { "$ref": "#/definitions/slave_id" },
        { "$ref": "#/definitions/no_setup" }
      ]
    },

    "enrgomera_iec_mode_c_device": {
      "allOf": [
        { "$ref": "#/definitions/deviceProperties" },
        { "$ref": "#/definitions/no_setup" },
        { "$ref": "#/definitions/channels_with_string_addresses" },
        { "$ref": "#/definitions/slave_id_broadcast" }
      ]
    },
    "enrgomera_iec_mode_c_device_no_channels": {
      "allOf": [
        { "$ref": "#/definitions/deviceProperties" },
        { "$ref": "#/definitions/no_setup" },
        { "$ref": "#/definitions/slave_id_broadcast" }
      ]
    },

    "simple_device_with_broadcast": {
      "allOf": [
        { "$ref": "#/definitions/deviceProperties" },
        { "$ref": "#/definitions/no_setup" },
        { "$ref": "#/definitions/common_channels" },
        { "$ref": "#/definitions/slave_id_broadcast" }
      ]
    },
    "simple_device_with_broadcast_no_channels": {
      "allOf": [
        { "$ref": "#/definitions/deviceProperties" },
        { "$ref": "#/definitions/no_setup" },
        { "$ref": "#/definitions/slave_id_broadcast" }
      ]
    },

    "simple_device_with_setup_no_channels": {
      "allOf": [
        { "$ref": "#/definitions/deviceProperties" },
        { "$ref": "#/definitions/common_setup" },
        { "$ref": "#/definitions/slave_id" }
      ]
    },
    "simple_device_with_setup": {
      "allOf": [
        { "$ref": "#/definitions/deviceProperties" },
        { "$ref": "#/definitions/common_channels" },
        { "$ref": "#/definitions/common_setup" },
        { "$ref": "#/definitions/slave_id" }
      ]
    },

    "modbus_device_properties": {
      "properties": {
        "supports_wb_continuous_read": {
          "title": "Enable continuous read",
          "description": "continuous_read_desc",
          "type": "boolean",
          "default": false,
          "propertyOrder": 9
        }
      }
    }
  },

  "required": ["device_type"],

  "defaultProperties": [ "slave_id", "device_type"],

  "translations": {
    "en": {
      "read_rate_limit_description": "This option is deprecated, use read period of channels instead",
      "read_period_description": "This option specifies the desired period between two consecutive reads of the channel. Short periods may not be maintained due to port bandwidth limitations",
      "broadcast_description": "Requests are sent without specifying exact id of the device. Use the mode if only one device is connected",
      "frame_timeout_description": "Specifies minimum inter-frame delay. For some protocols this value is used to split incoming data into frames.",
      "response_timeout_description": "Specifies maximum device's response time. Zero means no timeout. If not set, the default timeout (500ms) is used. If port's appropriate parameter is bigger, this one is overwritten.",
      "device_timeout_description": "Specifies timeout for device connection. If not set, default value 3000ms is used. Value -1 disables device reconnect. Zero means instant timeout.",
      "device_max_fail_cycles_desc": "Defines number of device polling cycles with all failed registers before marking device as disconnected. Default value is 2. Value -1 disables device reconnect. Zero means instant timeout.",
      "string_data_size_description": "For the modbus protocol, strings are read one character per register from the low byte. The parameter specifies the number of characters",
      "rate_limit_desc": "To reduce the load on the processor, it is not recommended to specify more than 100 reads for WB6 and 800 for WB7",
      "sporadic_description": "If a protocol allows, the register is excluded from periodic polling. Its change is sent by a special event",
      "semi_sporadic_description": "If a protocol allows, the register change is sent by a special event. At the same time, periodic polling continues",
      "force_frame_timeout_desc": "Wait frame timeout after receiving expected frame bytes count. All extra data is treated as noise and is dropped.",
      "max_write_fail_time_desc": "Maximum time that attempts to write a register will continue"
    },
    "ru": {
      "Response timeout (ms)": "Таймаут ответа (мс)",
      "Zero means no timeout. If not set, the default timeout (500ms) is used.": "Ноль - без таймаута. Таймаут по умолчанию 500мс",
      "Guard interval (us)": "Задержка перед записью в порт (мкс)",
      "Read period (ms)": "Период чтения (мс)",
      "read_period_description": "Задаёт период чтения канала в миллисекундах. Короткие периоды опроса могут не выдерживаться из-за ограничений пропускной способности порта.",
      "Slave id of the device": "Адрес устройства",
      "decimal or hex": "десятичное или шестнадцатеричное значение",
      "decimal (e.g. 123) or hex (e.g. 0xAF)": "десятичное (например, 123) или шестнадцатеричное (например, 0xAF)",
      "Should be decimal or hex": "Должно быть задано десятичное или шестнадцатеричное значение",
      "decimal": "десятичное значение",
      "Slave id of the device or broadcast mode": "Адрес устройства или широковещательный режим",
      "decimal or hex slave id": "адрес в десятичном или шестнадцатеричном виде",
      "decimal slave id": "адрес в десятичном виде",
      "broadcast": "широковещательные сообщения",
      "broadcast_description": "Запросы будут отправляться без указания адреса устройства. Используйте этот режим, если подключено только одно устройство",
      "Device name to be displayed in UI": "",
      "Device name": "Название устройства",
      "Enable device": "Опрашивать устройство",
      "MQTT id of the device": "Идентификатор устройства в MQTT",
      "Used as part of the topic": "Используется как часть топика в MQTT",
      "Password as a list of bytes": "Пароль в виде массива байт",
      "Access level": "Уровень доступа",
      "Max dummy read register count": "Максимальное число считываемых промежуточных регистров",
      "Max dummy read bit count": "Максимальное число считываемых промежуточных бит",
      "Maximum number of registers in a single bulk read request": "Максимальное число регистров, считываемых за один запрос",
      "Minimum number of registers in a single bulk read request": "Минимальное число регистров, считываемых за один запрос",
      "Additional delay before each writing to port (us)": "Дополнительная задержка перед записью в порт (мкс)",
      "Frame timeout (ms)": "Задержка между сообщениями (мс)",
      "Device timeout (ms)": "Время ожидания устройства (мс)",
      "Device max fail cycles": "Максимальное число неудачных циклов опроса",
      "frame_timeout_description": "Задаёт минимальную задержку между сообщениями. В некоторых протоколах это значение используется для определения границ сообщений.",
      "response_timeout_description": "Задаёт максимальное время ответа устройства. По умолчанию 500 мс. Если соответствующий параметр порта больше, то используется значение порта.",
      "device_timeout_description": "Задаёт время ожидания устройства. По умолчанию 3000 мс. Запрещает переподключение, если установлено -1.",
      "device_max_fail_cycles_desc": "Число неудачных циклов опроса устройства после которых оно считается отключенным. По умолчанию 2. Запрещает переподключение, если установлено -1.",
      "Setup command": "Команда настройки",
      "Command name": "Название команды",
      "Used for logging/debugging purposes only": "Используется только для диагностических сообщений",
      "Address": "Адрес",
      "Read Address" : "Адрес для чтения",
      "Write Address" : "Адрес для записи",
      "Register index (0-65535 in case of Modbus)": "Номер регистра (0-65535 для Modbus)",
      "Value": "Значение",
      "Enabled": "Включено",
      "MQTT id of the channel": " Идентификатор канала в MQTT",
      "Scale (value multiplier)": "Множитель",
      "Value offset": "Смещение",
      "Round to": "Точность",
      "Read-only": "Только для чтения",
      "'On' value": "Значение включенного состояния",
      "Value corresponding to the 'On' state of the switch": "Значение, которое соответствует включенному состоянию переключателя",
      "'Off' value": "Значение выключенного состояния",
      "Value corresponding to the 'Off' state of the switch": "Значение, которое соответствует выключенному состоянию переключателя",
      "Value displayed = round((value read * scale) + offset) / round_to) * round_to": "Отображаемое значение = округление((прочитанное значение * множитель) + смещение) / точность) * точность",
      "Error value": "Значение ошибки",
      "Value which should be treated as read error": "Значение, которое сигнализирует об ошибке в устройстве",
      "Unsupported register value": "Признак неподдерживаемого регистра",
      "Value which should be treated as 'register is unsupported by device'": "Значение сигнализирующее о том, что устройство не поддерживает данный регистр",
      "Compound channel": "Составной канал",
      "A list of subregisters": "Список вложенных регистров",
      "Channel": "Канал",
      "Channels": "Каналы",
      "Channel with separate r/w addresses": "Канал с раздельными адресами для чтения записи",
      "Write Only Channel": "Канал только для записи",
      "Enable poll": "Опрос",
      "Parameter": "Параметр",
      "Subregister": "Вложенный регистр",
      "Control name": "Название канала",
      "This name is displayed both in UI and used as part of MQTT topic": "Отображается в интерфейсе и используется как часть топика в MQTT",
      "Control type": "Тип канала",
      "Defaults to 'switch' for coils and discrete inputs, 'text' for others": "По умолчанию используется switch для дискретных выходов и входов, для остальных - текст",
      "Register type": "Тип регистра",
      "Format": "Формат",
      "Signed 16-bit integer": "16-битное целое со знаком",
      "Unsigned 16-bit integer": "16-битное целое без знака", 
      "Signed 8-bit integer": "8-битное целое со знаком",
      "Unsigned 8-bit integer": "8-битное целое без знака",
      "Signed 24-bit integer": "24-битное целое со знаком",
      "Unsigned 24-bit integer": "24-битное целое без знака",
      "Signed 32-bit integer": "32-битное целое со знаком",
      "Unsigned 32-bit integer": "32-битное целое без знака",
      "Signed 64-bit integer": "64-битное целое со знаком",
      "Unsigned 64-bit integer": "64-битное целое без знака",
      "IEEE754 32-bit float": "32-битное число с плавающей запятой (IEEE754)",
      "IEEE754 64-bit float (double)": "64-битное число с плавающей запятой (IEEE754)",
      "8-bit ASCII char": "8-битный символ ASCII",
      "16-bit Word Order": "Порядок 16-битных слов",
      "bits": "биты",
      "address:offset:bitwidth": "адрес:смещение:число бит",
      "Address should be decimal or hex, offset and bitwidth separated by ':'": "Адрес должен быть задан в десятичном или шестнадцатеричном виде. Смещение и число бит отделены двоеточием",
      "OBIS code": "Код OBIS",
      "OBIS code should contain 6 numbers separated by dots (X.X.X.X.X.X)": "Код OBIS должен состоять из 6 чисел, разделённых точками",
      "Custom channels": "Каналы, заданные пользователем",
      "DLMS client address": "Адрес клиента DLMS",
      "16 - public client (default), 32 - SPODES measurements reader, 48 - SPODES configurator": "16 - публичный клиент (по умолчанию), 32 - считыватель показаний СПОДЭС, 48 - конфигуратор СПОДЭС", 
      "Custom setup commands": "Команды настройки",
      "Motor type": "Тип двигателя",
      "DLMS authentication mode": "Режим аутентификации DLMS",
      "no authentication": "без аутентификации",
      "low": "слабый",
      "high": "сильный",
      "high, password is hashed with MD5": "сильный с хэшированием MD5",
      "high, password is hashed with SHA1": "сильный с хэшированием SHA1",
      "high, password is hashed with GMAC": "сильный с хэшированием GMAC",
      "high, password is hashed with SHA-256": "сильный с хэшированием SHA-256",
      "high, password is hashed with ECDSA": "сильный с хэшированием ECDSA",
      "DLMS interface": "Интерфейс DLMS",
      "TCP/IP or UDP wrapper, can be used with devices that support IEC 62056-47": "TCP/IP или UDP, может использоваться с устройствами, поддерживающими IEC 62056-47",
      "plain PDU": "PDU без модификации",
      "Wi-SUN FAN mesh network": "Wi-SUN FAN mesh-сеть",
      "Device": "Устройство",
      "Byte": "Байт",
      "Word order": "Порядок слов",
      "Name": "Имя",
      "Type": "Тип",
      "Maximum value": "Максимальное значение",
      "Read rate limit (ms)": "Читать не чаще (мс)",
      "Units": "Единицы измерения",
      "Poll": "Опрос",
      "Period (ms)": "Период (мс)",
      "in queue order": "в порядке очереди",
      "200 ms": "200 мс",
      "100 ms": "100 мс",
      "custom period": "задать период",
      "do not read": "не опрашивать",
      "read_rate_limit_description": "Этот параметр устарел и не рекомендуется к использованию, вместо него пользуйтесь периодом опроса канала",
      "not faster than (deprecated)": "не чаще чем раз в (устаревший параметр)",
      "String size in characters": "Размер строки в символах",
      "String": "Строка",
      "string_data_size_description": "Для протокола modbus строки считываются по одному символу на регистр из младшего байта. Параметр определяет количество символов",
      "rate_limit_desc": "Для снижения нагрузки на процессор не рекомендуется указывать более 100 чтений для WB6 и 800 для WB7",
      "Invalid channel ID": "Неверный идентификатор канала",
      "Invalid channel name": "Неверное имя канала",
      "Invalid device ID": "Неверный идентификатор устройства",
      "Dispatched with an event": "Передаётся с помощью события",
      "Dispatched with an event and polling": "Передаётся с помощью события и периодически опрашивается",
      "sporadic_description": "Если протокол передачи позволяет, то регистр исключается из периодического опроса. Его изменение отправляется специальным событием",
      "semi_sporadic_description": "Если протокол передачи позволяет, изменение состояния отправляется специальным событием. При этом продолжается периодический опрос",
      "List of values": "Список значений",
      "List of value titles": "Список названий значений",
      "force_frame_timeout_desc": "Использовать значение задержки между сообщениями для определения границ пакетов. Продолжать принимать данные, даже если получено ожидаемое число байт. Все дополнительно полученные данные будут отброшены. Более строгое соблюдение стандарта MODBUS, но медленнее опрос",
      "Force frame timeout": "Разделять сообщения по времени",
      "Max write fail time (s)": "Время повторных попыток записать регистр (с)",
      "max_write_fail_time_desc": "Максимальное время, в течение которого будут продолжаться попытки записать регистр"
    }
  }
}
