#include "devices/curtains/somfy_sdn_device.h"
#include "test_utils.h"

using namespace Somfy;

TEST(TSomfyTest, MakeRequest)
{
    ASSERT_TRUE(ArraysMatch(MakeRequest(Somfy::GET_MOTOR_POSITION, 0x0768C0, Somfy::SONESSE_30),
                            {0xF3, 0x74, 0xFD, 0x00, 0x00, 0xFF, 0x3F, 0x97, 0xF8, 0x05, 0x31}));
    // MOVE DOWN
    ASSERT_TRUE(ArraysMatch(MakeRequest(Somfy::CTRL_MOVE, 0x0768C0, Somfy::SONESSE_30, {0x00, 0xFF, 0x00}), 
                            {0xfe, 0x71, 0xfd, 0x00, 0x00, 0xff, 0x3f, 0x97, 0xf8, 0xff, 0x00, 0xff, 0x07, 0x37}));

    // MOVE UP
    ASSERT_TRUE(ArraysMatch(MakeRequest(Somfy::CTRL_MOVE, 0x0768C0, Somfy::SONESSE_30, {0x01, 0xFF, 0x00}), 
                            {0xfe, 0x71, 0xfd, 0x00, 0x00, 0xff, 0x3f, 0x97, 0xf8, 0xfe, 0x00, 0xff, 0x07, 0x36}));

    // SET DOWN LIMIT
    ASSERT_TRUE(ArraysMatch(MakeRequest(Somfy::SET_MOTOR_LIMITS, 0x0768C0, Somfy::SONESSE_30, {0x01, 0x00, 0x00, 0x00}), 
                            {0xee, 0x70, 0xfd, 0x00, 0x00, 0xff, 0x3f, 0x97, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0x09, 0x23}));

    // SET UP LIMIT
    ASSERT_TRUE(ArraysMatch(MakeRequest(Somfy::SET_MOTOR_LIMITS, 0x0768C0, Somfy::SONESSE_30, {0x01, 0x01, 0x00, 0x00}), 
                            {0xee, 0x70, 0xfd, 0x00, 0x00, 0xff, 0x3f, 0x97, 0xf8, 0xfe, 0xfe, 0xff, 0xff, 0x09, 0x22}));
}

TEST(TSomfyTest, MakeSetPositionRequest)
{
    ASSERT_TRUE(ArraysMatch(MakeSetPositionRequest(3, Somfy::SONESSE_30, 10), 
                            {0xfc, 0x70, 0xfd, 0x00, 0x00, 0xff, 0xfc, 0xff, 0xff, 0xfb, 0xf5, 0xff, 0xff, 0x0a, 0x50}));
}

TEST(TSomfyTest, ParseStatusReport)
{
    std::vector<uint8_t> data{0xF2, 0xEF, 0xDF, 0x3F, 0x97, 0xF8, 0x00, 0x00, 0xFF, 0x45, 0xFE, 0xD4, 0x00, 0x00, 0x07, 0xA4};
    FixReceivedFrame(data);

    ASSERT_EQ(ParseStatusReport(0x0768C0, Somfy::POST_MOTOR_POSITION, data), 0xFFFF2B01BA);

    data.back() = 0xAA;
    ASSERT_THROW(CheckExceptionMsg([&](){ParseStatusReport(0x0768C0, Somfy::POST_MOTOR_POSITION, data);}, 
                                   "Bad CRC"), 
                 TSerialDeviceTransientErrorException);
}
